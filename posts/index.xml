<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Team&#39;s blog</title>
		<link>https://hansomxue99.github.io/posts/</link>
		<description>Recent content in Posts on Team&#39;s blog</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>zh-CN</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Mon, 26 Apr 2021 20:28:28 +0800</lastBuildDate>
		<atom:link href="https://hansomxue99.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>C#声音捕获基础</title>
			<link>https://hansomxue99.github.io/posts/c_capturesound/</link>
			<pubDate>Mon, 26 Apr 2021 20:28:28 +0800</pubDate>
			
			<guid>https://hansomxue99.github.io/posts/c_capturesound/</guid>
			<description>using Microsoft.DirectX.DirectSound;
  Capture;	//音频捕捉设备 CaptureBuffer;	//缓冲区对象 WaveFormat;	//录音格式   设置录音参数
private WaveFormat mWaveFormat; private WaveFormat CreateWaveFormat() { WaveFormat waveformat = new WaveFormat(); waveformat.FormatTag = WaveFormatTag.Pcm;	//音频类型设为PCM  waveformat.SamplesPerSecond = 11025;	//采样率典型值：11025、22050、44100Hz(为了简化程序，暂且设为定值)  waveformat.BitsPerSample = 16;	//采样位数  waveformat.Channels = 2;	//声道：1单声道，2立体声  waveformat.BlockAlign = (short)(waveformat.Channels * (waveformat.BitsPerSample / 8));//单位采样点的字节数  waveformat.AverageBytesPerSecond = waveformat.BlockAlign * waveformat.SamplesPerSecond; return waveformat; // 按照以上采样规格，可知采样1秒钟的字节数为 11025*2=32000B 约为22K } //mWaveFormat = CreateWaveFormat();   初始化录音设备</description>
			<content type="html"><![CDATA[<ol>
<li>
<p><code>using Microsoft.DirectX.DirectSound;</code></p>
</li>
<li>
<div class="highlight"><pre class="chroma"><code class="language-c#" data-lang="c#"><span class="n">Capture</span><span class="p">;</span>		<span class="c1">//音频捕捉设备
</span><span class="c1"></span><span class="n">CaptureBuffer</span><span class="p">;</span>	<span class="c1">//缓冲区对象
</span><span class="c1"></span><span class="n">WaveFormat</span><span class="p">;</span>		<span class="c1">//录音格式
</span></code></pre></div></li>
<li>
<p>设置录音参数</p>
<div class="highlight"><pre class="chroma"><code class="language-c#" data-lang="c#"><span class="k">private</span> <span class="n">WaveFormat</span> <span class="n">mWaveFormat</span><span class="p">;</span>
   
<span class="k">private</span> <span class="n">WaveFormat</span> <span class="n">CreateWaveFormat</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">WaveFormat</span> <span class="n">waveformat</span> <span class="p">=</span> <span class="k">new</span> <span class="n">WaveFormat</span><span class="p">();</span>
    <span class="n">waveformat</span><span class="p">.</span><span class="n">FormatTag</span> <span class="p">=</span> <span class="n">WaveFormatTag</span><span class="p">.</span><span class="n">Pcm</span><span class="p">;</span>	<span class="c1">//音频类型设为PCM
</span><span class="c1"></span>    <span class="n">waveformat</span><span class="p">.</span><span class="n">SamplesPerSecond</span> <span class="p">=</span> <span class="m">11025</span><span class="p">;</span>		<span class="c1">//采样率典型值：11025、22050、44100Hz(为了简化程序，暂且设为定值)
</span><span class="c1"></span>    <span class="n">waveformat</span><span class="p">.</span><span class="n">BitsPerSample</span> <span class="p">=</span> <span class="m">16</span><span class="p">;</span>				<span class="c1">//采样位数  
</span><span class="c1"></span>    <span class="n">waveformat</span><span class="p">.</span><span class="n">Channels</span> <span class="p">=</span> <span class="m">2</span><span class="p">;</span>					<span class="c1">//声道：1单声道，2立体声  
</span><span class="c1"></span>    <span class="n">waveformat</span><span class="p">.</span><span class="n">BlockAlign</span> <span class="p">=</span> <span class="p">(</span><span class="kt">short</span><span class="p">)(</span><span class="n">waveformat</span><span class="p">.</span><span class="n">Channels</span> <span class="p">*</span> <span class="p">(</span><span class="n">waveformat</span><span class="p">.</span><span class="n">BitsPerSample</span> <span class="p">/</span> <span class="m">8</span><span class="p">));</span><span class="c1">//单位采样点的字节数  
</span><span class="c1"></span>    <span class="n">waveformat</span><span class="p">.</span><span class="n">AverageBytesPerSecond</span> <span class="p">=</span> <span class="n">waveformat</span><span class="p">.</span><span class="n">BlockAlign</span> <span class="p">*</span> <span class="n">waveformat</span><span class="p">.</span><span class="n">SamplesPerSecond</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">waveformat</span><span class="p">;</span>
    <span class="c1">// 按照以上采样规格，可知采样1秒钟的字节数为 11025*2=32000B 约为22K
</span><span class="c1"></span><span class="p">}</span>
   
<span class="c1">//mWaveFormat = CreateWaveFormat();
</span></code></pre></div></li>
<li>
<p>初始化录音设备</p>
<div class="highlight"><pre class="chroma"><code class="language-c#" data-lang="c#"><span class="k">private</span> <span class="n">Capture</span> <span class="n">mCapDev</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>		<span class="c1">//音频捕捉设备初始设为NULL
</span><span class="c1"></span>   
<span class="k">private</span> <span class="kt">bool</span> <span class="n">CreateCaptureDevice</span><span class="p">()</span>
<span class="p">{</span>
    <span class="c1">//枚举可用的录音设备  
</span><span class="c1"></span>    <span class="n">CaptureDevicesCollection</span> <span class="n">capturedev</span> <span class="p">=</span> <span class="k">new</span> <span class="n">CaptureDevicesCollection</span><span class="p">();</span>
    <span class="n">Guid</span> <span class="n">devguid</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="n">Empty</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">capturedev</span><span class="p">.</span><span class="n">Count</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
     <span class="n">devguid</span> <span class="p">=</span> <span class="n">capturedev</span><span class="p">[</span><span class="m">0</span><span class="p">].</span><span class="n">DriverGuid</span><span class="p">;</span> 	<span class="c1">//0选择默认录音设备
</span><span class="c1"></span>    <span class="k">else</span>
     <span class="c1">//MessageBox.Show(&#34;当前没有可用于音频捕捉的设备&#34;, &#34;系统提示&#34;);
</span><span class="c1"></span>     <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
   
    <span class="c1">//利用设备GUID来建立一个捕捉设备对象  
</span><span class="c1"></span>    <span class="n">mCapDev</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Capture</span><span class="p">(</span><span class="n">devguid</span><span class="p">);</span>
    <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
<span class="p">}</span>
   
<span class="c1">//CreateCaptureDevice();
</span></code></pre></div></li>
<li>
<p>创建录音缓存区</p>
<div class="highlight"><pre class="chroma"><code class="language-c#" data-lang="c#"><span class="k">private</span> <span class="n">CaptureBuffer</span> <span class="n">captureBuffer</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span><span class="c1">//录音缓冲区 
</span><span class="c1"></span><span class="k">private</span> <span class="n">WaveFormat</span> <span class="n">mWaveFormat</span><span class="p">;</span>
   
<span class="k">private</span> <span class="kt">int</span> <span class="n">iNotifyNum</span> <span class="p">;</span>		<span class="c1">//通知的个数  
</span><span class="c1"></span><span class="k">private</span> <span class="kt">int</span> <span class="n">iNotifySize</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>	<span class="c1">//通知所在区域大小 
</span><span class="c1"></span><span class="k">private</span> <span class="kt">int</span> <span class="n">iBufferSize</span><span class="p">;</span>
   
<span class="k">private</span> <span class="k">void</span> <span class="n">CreateCaptureBuffer</span><span class="p">(</span> <span class="kt">int</span> <span class="n">bufferNum</span><span class="p">,</span> <span class="kt">double</span> <span class="n">bufferSizeSeconds</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="n">iNotifyNum</span> <span class="p">=</span> <span class="n">bufferNum</span><span class="p">;</span>
    <span class="c1">//缓冲区的描述对象
</span><span class="c1"></span>    <span class="n">CaptureBufferDescription</span> <span class="n">bufferDesc</span> <span class="p">=</span> <span class="k">new</span> <span class="n">CaptureBufferDescription</span><span class="p">();</span>
    <span class="n">bufferDesc</span><span class="p">.</span><span class="n">Format</span> <span class="p">=</span> <span class="n">mWaveFormat</span><span class="p">;</span>			<span class="c1">//1. 设置录音数据格式  
</span><span class="c1"></span>    <span class="n">iNotifySize</span> <span class="p">=(</span><span class="kt">int</span><span class="p">)(</span> <span class="n">mWaveFormat</span><span class="p">.</span><span class="n">SamplesPerSecond</span> <span class="p">*</span> <span class="n">bufferSizeSeconds</span><span class="p">*</span> <span class="n">mWaveFormat</span><span class="p">.</span><span class="n">Channels</span><span class="p">);</span>
    <span class="n">iBufferSize</span> <span class="p">=</span> <span class="n">iNotifyNum</span> <span class="p">*</span> <span class="n">iNotifySize</span><span class="p">;</span>
    <span class="n">bufferDesc</span><span class="p">.</span><span class="n">BufferBytes</span> <span class="p">=</span> <span class="n">iBufferSize</span><span class="p">;</span>	<span class="c1">//2. 设置录音缓存大小
</span><span class="c1"></span>    <span class="n">captureBuffer</span> <span class="p">=</span> <span class="k">new</span> <span class="n">CaptureBuffer</span><span class="p">(</span><span class="n">bufferDesc</span><span class="p">,</span> <span class="n">mCapDev</span><span class="p">);</span>	<span class="c1">//3. 创建录音缓冲区  
</span><span class="c1"></span><span class="p">}</span>
   
<span class="c1">//CreateCaptureBffer(bufferNum, bufferSizeSeconds);
</span></code></pre></div></li>
<li>
<p>创建缓存区录制通知</p>
<div class="highlight"><pre class="chroma"><code class="language-c#" data-lang="c#"><span class="k">private</span> <span class="n">Notify</span> <span class="n">captureNotify</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>			<span class="c1">//缓冲区录制通知
</span><span class="c1"></span><span class="k">private</span> <span class="n">AutoResetEvent</span> <span class="n">notifyevent</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>		<span class="c1">//通知事件
</span><span class="c1"></span>   
<span class="k">private</span> <span class="kt">int</span> <span class="n">iNotifyNum</span> <span class="p">;</span>		<span class="c1">//通知的个数  
</span><span class="c1"></span><span class="k">private</span> <span class="kt">int</span> <span class="n">iNotifySize</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>	<span class="c1">//通知所在区域大小 
</span><span class="c1"></span>   
<span class="k">private</span> <span class="k">void</span> <span class="n">CreateNotification</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">BufferPositionNotify</span><span class="p">[]</span> <span class="n">bpn</span> <span class="p">=</span> <span class="k">new</span> <span class="n">BufferPositionNotify</span><span class="p">[</span><span class="n">iNotifyNum</span><span class="p">];</span>		<span class="c1">//缓存位置通知点数组  
</span><span class="c1"></span>    <span class="n">notifyevent</span> <span class="p">=</span> <span class="k">new</span> <span class="n">AutoResetEvent</span><span class="p">(</span><span class="k">false</span><span class="p">);</span> 	<span class="c1">//同步事件对象，初始化
</span><span class="c1"></span>   
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">iNotifyNum</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
    <span class="p">{</span>
        <span class="n">bpn</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">Offset</span> <span class="p">=</span> <span class="p">(</span><span class="n">i</span> <span class="p">+</span> <span class="m">1</span><span class="p">)</span> <span class="p">*</span> <span class="n">iNotifySize</span> <span class="p">-</span> <span class="m">1</span><span class="p">;</span><span class="c1">//设置缓冲区位置，到达该位置发出通知  
</span><span class="c1"></span>        <span class="n">bpn</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">EventNotifyHandle</span> <span class="p">=</span> <span class="n">notifyevent</span><span class="p">.</span><span class="n">Handle</span><span class="p">;</span><span class="c1">//设置通知事件，该事件发出通知
</span><span class="c1"></span>    <span class="p">}</span>
    <span class="n">captureNotify</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Notify</span><span class="p">(</span><span class="n">captureBuffer</span><span class="p">);</span> <span class="c1">//1. 创建captureBuffer录音缓存的通知
</span><span class="c1"></span>    <span class="n">captureNotify</span><span class="p">.</span><span class="n">SetNotificationPositions</span><span class="p">(</span><span class="n">bpn</span><span class="p">);</span> <span class="c1">//2. 设置多个通知点
</span><span class="c1"></span><span class="p">}</span>
</code></pre></div></li>
<li>
<p>以上工作都是前期准备，对录音设备的初始化，以下功能由用户自定义。</p>
<p>（1）设备初始化</p>
<div class="highlight"><pre class="chroma"><code class="language-c#" data-lang="c#"><span class="k">public</span> <span class="kt">bool</span> <span class="n">InitReciever</span><span class="p">(</span><span class="kt">int</span> <span class="n">bufferNums</span><span class="p">,</span> <span class="kt">double</span> <span class="n">bufferSeconds</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">CreateWaveFormat</span><span class="p">();</span>		<span class="c1">//1.
</span><span class="c1"></span> <span class="kt">bool</span> <span class="n">jud</span> <span class="p">=</span> <span class="n">CreateCaptureDevice</span><span class="p">();</span>	<span class="c1">//2.
</span><span class="c1"></span>    <span class="k">if</span><span class="p">(!</span><span class="n">jud</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">jud</span><span class="p">;</span>
    <span class="n">CreateCaptureBuffer</span><span class="p">(</span><span class="n">bufferNums</span><span class="p">,</span> <span class="n">bufferSeconds</span><span class="p">);</span>
    <span class="n">CreateNotification</span><span class="p">();</span>
    <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>（2）设备开始录制和停止</p>
<div class="highlight"><pre class="chroma"><code class="language-c#" data-lang="c#"><span class="k">private</span> <span class="n">Thread</span> <span class="n">notifythread</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>		<span class="c1">//新建一个线程
</span><span class="c1"></span><span class="k">private</span> <span class="n">CaptureBuffer</span> <span class="n">captureBuffer</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span><span class="c1">//录音缓冲区 
</span><span class="c1"></span>   
<span class="k">public</span> <span class="k">void</span> <span class="n">recStart</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">notifythread</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
        <span class="n">notifythread</span><span class="p">.</span><span class="n">Abort</span><span class="p">();</span>
    <span class="n">notifythread</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="p">(</span><span class="n">RecordData</span><span class="p">);</span> 		<span class="c1">//录音线程
</span><span class="c1"></span>   
    <span class="n">captureBuffer</span><span class="p">.</span><span class="n">Start</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>            
    <span class="n">notifythread</span><span class="p">.</span><span class="n">Start</span><span class="p">();</span>            
<span class="p">}</span>
   
<span class="k">public</span> <span class="k">void</span> <span class="n">recStop</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">if</span><span class="p">(</span> <span class="n">notifythread</span> <span class="p">!=</span><span class="k">null</span> <span class="p">)</span>
        <span class="n">notifythread</span><span class="p">.</span><span class="n">Abort</span><span class="p">();</span>
    <span class="n">captureBuffer</span><span class="p">.</span><span class="n">Stop</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></li>
<li>
<p>录音涉及双线程 <code>notifythread = new Thread(RecordData);</code></p>
<div class="highlight"><pre class="chroma"><code class="language-c#" data-lang="c#"><span class="k">private</span> <span class="k">void</span> <span class="n">RecordData</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">while</span> <span class="p">(</span><span class="k">true</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// 等待缓冲区的通知消息  
</span><span class="c1"></span>        <span class="n">notifyevent</span><span class="p">.</span><span class="n">WaitOne</span><span class="p">();</span>
        <span class="c1">// 录制数据  
</span><span class="c1"></span>        <span class="n">RecordCapturedData</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>这里再次封装了一个数据记录函数</p>
<div class="highlight"><pre class="chroma"><code class="language-c#" data-lang="c#"><span class="k">private</span> <span class="n">CaptureBuffer</span> <span class="n">captureBuffer</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span><span class="c1">//录音缓冲区 
</span><span class="c1"></span><span class="k">private</span> <span class="kt">int</span> <span class="n">iLastPos</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span><span class="c1">//上一次读取数据位置 
</span><span class="c1"></span>   
<span class="k">private</span> <span class="k">void</span> <span class="n">RecordCapturedData</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">byte</span><span class="p">[]</span> <span class="n">capturedata</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>		<span class="c1">//字节数组存储捕获的数据
</span><span class="c1"></span>    <span class="kt">int</span> <span class="n">readpos</span> <span class="p">=</span> <span class="m">0</span><span class="p">,</span> <span class="n">capturepos</span> <span class="p">=</span> <span class="m">0</span><span class="p">,</span> <span class="n">locksize</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
   
    <span class="c1">//获取录制数据位置
</span><span class="c1"></span>    <span class="n">captureBuffer</span><span class="p">.</span><span class="n">GetCurrentPosition</span><span class="p">(</span><span class="k">out</span> <span class="n">capturepos</span><span class="p">,</span> <span class="k">out</span> <span class="n">readpos</span><span class="p">);</span>
    <span class="n">locksize</span> <span class="p">=</span> <span class="n">readpos</span> <span class="p">-</span> <span class="n">iLastPos</span><span class="p">;</span><span class="c1">//可以安全读取的数据大小  
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">locksize</span> <span class="p">==</span> <span class="m">0</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">locksize</span> <span class="p">&lt;</span> <span class="m">0</span><span class="p">)</span>
        <span class="n">locksize</span> <span class="p">+=</span> <span class="n">iBufferSize</span><span class="p">;</span><span class="c1">//循环缓冲区，指针绕回
</span><span class="c1"></span>    <span class="c1">//读取录制好的数据
</span><span class="c1"></span>    <span class="n">capturedata</span> <span class="p">=</span> <span class="p">(</span><span class="kt">byte</span><span class="p">[])</span><span class="n">captureBuffer</span><span class="p">.</span><span class="n">Read</span><span class="p">(</span><span class="n">iLastPos</span><span class="p">,</span> <span class="k">typeof</span><span class="p">(</span><span class="kt">byte</span><span class="p">),</span> <span class="n">LockFlag</span><span class="p">.</span><span class="n">FromWriteCursor</span><span class="p">,</span> <span class="n">locksize</span><span class="p">);</span>
    <span class="c1">//处理接收到的数据
</span><span class="c1"></span>    <span class="n">process</span><span class="p">?.</span><span class="n">Invoke</span><span class="p">(</span><span class="n">capturedata</span><span class="p">);</span>
   
    <span class="n">iLastPos</span> <span class="p">+=</span> <span class="n">capturedata</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span>
    <span class="n">iLastPos</span> <span class="p">%=</span> <span class="n">iBufferSize</span><span class="p">;</span><span class="c1">//取模是因为缓冲区是循环的。  
</span><span class="c1"></span>    <span class="n">iSampleSize</span> <span class="p">+=</span> <span class="n">capturedata</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></li>
<li>
<p>值得一提的是，这里自定义了一个回调函数</p>
<div class="highlight"><pre class="chroma"><code class="language-c#" data-lang="c#"><span class="k">public</span> <span class="k">delegate</span> <span class="k">void</span> <span class="n">OnRecieveData</span><span class="p">(</span><span class="kt">byte</span><span class="p">[]</span> <span class="n">model</span><span class="p">);</span> <span class="c1">//回调函数原型定义
</span><span class="c1"></span>   
<span class="k">public</span> <span class="n">OnRecieveData</span> <span class="n">process</span><span class="p">;</span><span class="c1">//接收数据处理代理：提供回调函数。收到数据时被调用
</span></code></pre></div></li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>C#多线程</title>
			<link>https://hansomxue99.github.io/posts/c_multithread/</link>
			<pubDate>Mon, 26 Apr 2021 20:27:32 +0800</pubDate>
			
			<guid>https://hansomxue99.github.io/posts/c_multithread/</guid>
			<description>C# 多线程 1. 创建线程 首先必须导入命名空间 using System.Threading; 创建的线程包括无参数和有参数。
//创建无参线程 Thread t1 = new Thread(new ThreadStart(PrintNumbers));	//无参数的委托 t1.Start(); static void PrintNumbers(){...} //创建有参线程 Thread t2 = new Thread(new ParameterizedThreadStart(PrintNumbers));	//有参数的委托 t2.Start(10); static void PrintNumbers(object count){...}	//参数类型声明为object 2. AutoResetEvent 1）对象实例化
AutoResetEvent autoResetEvent = new AutoResetEvent(false); false：无信号，子线程的WaitOne方法不会被自动调用
true：有信号，子线程的WaitOne方法会被自动调用
2）WaitOne 方法
组织当前线程继续运行，等待其他线程发送信号。
3）Set方法
示例：
static AutoResetEvent autoResetEvent = new AutoResetEvent(true); static void Main(string[] args) { //开启一个读线程(子线程)  Thread readerThread = new Thread(new ThreadStart(ReadThreadProc)); readerThread.Name = &amp;#34;ReaderThread&amp;#34;; readerThread.</description>
			<content type="html"><![CDATA[<h2 id="c-多线程">C# 多线程</h2>
<h3 id="1-创建线程">1. 创建线程</h3>
<p>首先必须导入命名空间 <code>using System.Threading;</code> 创建的线程包括无参数和有参数。</p>
<div class="highlight"><pre class="chroma"><code class="language-c#" data-lang="c#"><span class="c1">//创建无参线程
</span><span class="c1"></span><span class="n">Thread</span> <span class="n">t1</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="p">(</span><span class="k">new</span> <span class="n">ThreadStart</span><span class="p">(</span><span class="n">PrintNumbers</span><span class="p">));</span>		<span class="c1">//无参数的委托
</span><span class="c1"></span><span class="n">t1</span><span class="p">.</span><span class="n">Start</span><span class="p">();</span>

<span class="k">static</span> <span class="k">void</span> <span class="n">PrintNumbers</span><span class="p">(){...}</span>

<span class="c1">//创建有参线程
</span><span class="c1"></span><span class="n">Thread</span> <span class="n">t2</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="p">(</span><span class="k">new</span> <span class="n">ParameterizedThreadStart</span><span class="p">(</span><span class="n">PrintNumbers</span><span class="p">));</span>		<span class="c1">//有参数的委托
</span><span class="c1"></span><span class="n">t2</span><span class="p">.</span><span class="n">Start</span><span class="p">(</span><span class="m">10</span><span class="p">);</span>

<span class="k">static</span> <span class="k">void</span> <span class="n">PrintNumbers</span><span class="p">(</span><span class="kt">object</span> <span class="n">count</span><span class="p">){...}</span>		<span class="c1">//参数类型声明为object
</span></code></pre></div><h3 id="2-autoresetevent">2. AutoResetEvent</h3>
<p>1）对象实例化</p>
<div class="highlight"><pre class="chroma"><code class="language-c#" data-lang="c#"><span class="n">AutoResetEvent</span> <span class="n">autoResetEvent</span> <span class="p">=</span> <span class="k">new</span> <span class="n">AutoResetEvent</span><span class="p">(</span><span class="k">false</span><span class="p">);</span>
</code></pre></div><p>false：无信号，子线程的WaitOne方法不会被自动调用</p>
<p>true：有信号，子线程的WaitOne方法会被自动调用</p>
<p>2）WaitOne 方法</p>
<p>组织当前线程继续运行，等待其他线程发送信号。</p>
<p>3）Set方法</p>
<p>示例：</p>
<div class="highlight"><pre class="chroma"><code class="language-c#" data-lang="c#"><span class="k">static</span> <span class="n">AutoResetEvent</span> <span class="n">autoResetEvent</span> <span class="p">=</span> <span class="k">new</span> <span class="n">AutoResetEvent</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>

<span class="k">static</span> <span class="k">void</span> <span class="n">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">//开启一个读线程(子线程)
</span><span class="c1"></span>    <span class="n">Thread</span> <span class="n">readerThread</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="p">(</span><span class="k">new</span> <span class="n">ThreadStart</span><span class="p">(</span><span class="n">ReadThreadProc</span><span class="p">));</span>
    <span class="n">readerThread</span><span class="p">.</span><span class="n">Name</span> <span class="p">=</span> <span class="s">&#34;ReaderThread&#34;</span><span class="p">;</span>
    <span class="n">readerThread</span><span class="p">.</span><span class="n">Start</span><span class="p">();</span>

    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;=</span> <span class="n">readWriteCount</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
    <span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&#34;MainThread writing : {0}&#34;</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>

        <span class="c1">//主(写)线程将数据写入
</span><span class="c1"></span>        <span class="n">myData</span> <span class="p">=</span> <span class="n">i</span><span class="p">;</span>

        <span class="c1">//主(写)线程发信号，说明值已写过了
</span><span class="c1"></span>        <span class="c1">//即通知正在等待的线程有事件发生
</span><span class="c1"></span>        <span class="n">autoResetEvent</span><span class="p">.</span><span class="n">Set</span><span class="p">();</span>
        
        <span class="n">Thread</span><span class="p">.</span><span class="n">Sleep</span><span class="p">(</span><span class="m">1</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">//终止线程
</span><span class="c1"></span>    <span class="n">readerThread</span><span class="p">.</span><span class="n">Abort</span><span class="p">();</span>
<span class="p">}</span>

<span class="k">static</span> <span class="k">void</span> <span class="n">ReadThreadProc</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">while</span> <span class="p">(</span><span class="k">true</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">//在数据被写入前，读线程等待（实际上是等待写线程发出数据写完的信号）
</span><span class="c1"></span>        <span class="n">autoResetEvent</span><span class="p">.</span><span class="n">WaitOne</span><span class="p">();</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&#34;{0} reading : {1}&#34;</span><span class="p">,</span> <span class="n">Thread</span><span class="p">.</span><span class="n">CurrentThread</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span> <span class="n">myData</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>作业改写：</p>
<div class="highlight"><pre class="chroma"><code class="language-c#" data-lang="c#"><span class="k">static</span> <span class="n">AutoResetEvent</span> <span class="n">WriteEvent</span> <span class="p">=</span> <span class="k">new</span> <span class="n">AutoResetEvent</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
<span class="k">static</span> <span class="n">AutoResetEvent</span> <span class="n">ReadEvent</span> <span class="p">=</span> <span class="k">new</span> <span class="n">AutoResetEvent</span><span class="p">(</span><span class="k">false</span><span class="p">);</span>

<span class="k">static</span> <span class="n">Thread</span> <span class="n">readThread</span><span class="p">;</span>
<span class="k">static</span> <span class="n">Thread</span> <span class="n">writeThread</span><span class="p">;</span>

<span class="k">static</span> <span class="n">usData</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
<span class="k">static</span> <span class="k">void</span> <span class="n">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">if</span><span class="p">(</span><span class="n">readThread</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
        <span class="n">readThread</span><span class="p">.</span><span class="n">Abort</span><span class="p">();</span>
    <span class="c1">//开启一个读线程(子线程)
</span><span class="c1"></span>    <span class="n">readThread</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="p">(</span><span class="k">new</span> <span class="n">ThreadStart</span><span class="p">(</span><span class="n">ReadThreadProc</span><span class="p">));</span>
    <span class="n">readerThread</span><span class="p">.</span><span class="n">Name</span> <span class="p">=</span> <span class="s">&#34;ReadThread&#34;</span><span class="p">;</span>
    <span class="n">readerThread</span><span class="p">.</span><span class="n">Start</span><span class="p">();</span>
    
    <span class="c1">//开启一个写线程(子线程)
</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="n">writeThread</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
        <span class="n">writeThread</span><span class="p">.</span><span class="n">Abort</span><span class="p">();</span>
    <span class="n">writeThread</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="p">(</span><span class="k">new</span> <span class="n">ThreadStart</span><span class="p">(</span><span class="n">WriteThreadProc</span><span class="p">));</span>
    <span class="n">writeThread</span><span class="p">.</span><span class="n">Name</span> <span class="p">=</span> <span class="s">&#34;writeThread&#34;</span><span class="p">;</span>
    <span class="n">readerThread</span><span class="p">.</span><span class="n">Start</span><span class="p">();</span>
<span class="p">}</span>

<span class="k">static</span> <span class="k">void</span> <span class="n">WriteThreadProc</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">while</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">WriteEvent</span><span class="p">.</span><span class="n">WaitOne</span><span class="p">();</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&#34;{0} Writing : {1}&#34;</span><span class="p">,</span> <span class="n">Thread</span><span class="p">.</span><span class="n">CurrentThread</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span> <span class="n">usData</span><span class="p">);</span>
        <span class="n">ReadEvent</span><span class="p">.</span><span class="n">Set</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">static</span> <span class="k">void</span> <span class="n">ReadThreadProc</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">while</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">ReadEvent</span><span class="p">.</span><span class="n">WaitOne</span><span class="p">();</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&#34;{0} Reading : {1}&#34;</span><span class="p">,</span> <span class="n">Thread</span><span class="p">.</span><span class="n">CurrentThread</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span> <span class="n">usData</span><span class="p">++);</span>
        <span class="n">Write</span><span class="p">.</span><span class="n">Set</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>进一步改写</p>
<div class="highlight"><pre class="chroma"><code class="language-c#" data-lang="c#"><span class="k">static</span> <span class="n">AutoResetEvent</span> <span class="n">WriteEvent</span> <span class="p">=</span> <span class="k">new</span> <span class="n">AutoResetEvent</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
<span class="k">static</span> <span class="n">AutoResetEvent</span> <span class="n">ReadEvent</span> <span class="p">=</span> <span class="k">new</span> <span class="n">AutoResetEvent</span><span class="p">(</span><span class="k">false</span><span class="p">);</span>

<span class="k">static</span> <span class="n">Thread</span> <span class="n">readThread</span><span class="p">;</span>
<span class="k">static</span> <span class="n">Thread</span> <span class="n">writeThread</span><span class="p">;</span>

<span class="kt">double</span> <span class="n">usData</span> <span class="p">=</span> <span class="m">0.0d</span><span class="p">;</span>
<span class="k">static</span> <span class="k">void</span> <span class="n">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">if</span><span class="p">(</span><span class="n">readThread</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
        <span class="n">readThread</span><span class="p">.</span><span class="n">Abort</span><span class="p">();</span>
    <span class="c1">//开启一个读线程(子线程)
</span><span class="c1"></span>    <span class="n">readThread</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="p">(</span><span class="k">new</span> <span class="n">ThreadStart</span><span class="p">(</span><span class="n">ReadThreadProc</span><span class="p">));</span>
    <span class="n">readThread</span><span class="p">.</span><span class="n">Name</span> <span class="p">=</span> <span class="s">&#34;ReadThread&#34;</span><span class="p">;</span>
    <span class="n">readThread</span><span class="p">.</span><span class="n">Start</span><span class="p">();</span>
    
    <span class="c1">//开启一个写线程(子线程)
</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="n">writeThread</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
        <span class="n">writeThread</span><span class="p">.</span><span class="n">Abort</span><span class="p">();</span>
    <span class="n">writeThread</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="p">(</span><span class="k">new</span> <span class="n">ThreadStart</span><span class="p">(</span><span class="n">WriteThreadProc</span><span class="p">));</span>
    <span class="n">writeThread</span><span class="p">.</span><span class="n">Name</span> <span class="p">=</span> <span class="s">&#34;writeThread&#34;</span><span class="p">;</span>
    <span class="n">writeThread</span><span class="p">.</span><span class="n">Start</span><span class="p">();</span>
<span class="p">}</span>

<span class="k">static</span> <span class="k">void</span> <span class="n">WriteThreadProc</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">double</span> <span class="n">fre</span> <span class="p">=</span> <span class="m">1.0d</span><span class="p">;</span>
    <span class="kt">double</span> <span class="n">time</span> <span class="p">=</span> <span class="m">0.0d</span><span class="p">;</span>
    <span class="kt">double</span> <span class="n">delta</span> <span class="p">=</span> <span class="m">1</span><span class="p">/(</span><span class="kt">double</span><span class="p">)</span><span class="n">sample</span><span class="p">;</span>
    <span class="k">while</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">WriteEvent</span><span class="p">.</span><span class="n">WaitOne</span><span class="p">();</span>
        <span class="c1">//Console.WriteLine(&#34;{0} Writing : {1}&#34;, Thread.CurrentThread.Name, usData);
</span><span class="c1"></span>        <span class="n">usData</span> <span class="p">=</span> <span class="n">Math</span><span class="p">.</span><span class="n">Sin</span><span class="p">(</span><span class="m">2.0f</span> <span class="p">*</span> <span class="n">Math</span><span class="p">.</span><span class="n">PI</span> <span class="p">*</span> <span class="n">fre</span> <span class="p">*</span> <span class="n">time</span><span class="p">);</span>
        <span class="n">time</span> <span class="p">+=</span> <span class="n">delta</span><span class="p">;</span>
        <span class="n">ReadEvent</span><span class="p">.</span><span class="n">Set</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">static</span> <span class="k">void</span> <span class="n">ReadThreadProc</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">while</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">ReadEvent</span><span class="p">.</span><span class="n">WaitOne</span><span class="p">();</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&#34;{0} Reading : {1}&#34;</span><span class="p">,</span> <span class="n">Thread</span><span class="p">.</span><span class="n">CurrentThread</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span> <span class="n">usData</span><span class="p">++);</span>
        <span class="n">WriteEvent</span><span class="p">.</span><span class="n">Set</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>form3.cs</p>
<div class="highlight"><pre class="chroma"><code class="language-c#" data-lang="c#">        <span class="c1">/// &lt;summary&gt;
</span><span class="c1"></span>        <span class="c1">/// 画布清屏
</span><span class="c1"></span>        <span class="c1">/// &lt;/summary&gt;
</span><span class="c1"></span>        <span class="c1">/// &lt;param name=&#34;sender&#34;&gt;&lt;/param&gt;
</span><span class="c1"></span>        <span class="c1">/// &lt;param name=&#34;e&#34;&gt;&lt;/param&gt;
</span><span class="c1"></span>        <span class="k">private</span> <span class="k">void</span> <span class="n">Subform2_button_clear_Click</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">EventArgs</span> <span class="n">e</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Graphics</span> <span class="n">g</span> <span class="p">=</span> <span class="n">Subform2_pictureBox1</span><span class="p">.</span><span class="n">CreateGraphics</span><span class="p">();</span>
            <span class="n">g</span><span class="p">.</span><span class="n">Clear</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">White</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">/// &lt;summary&gt;
</span><span class="c1"></span>        <span class="c1">/// 在画布上绘制波形
</span><span class="c1"></span>        <span class="c1">/// &lt;/summary&gt;
</span><span class="c1"></span>        <span class="c1">/// &lt;param name=&#34;sender&#34;&gt;&lt;/param&gt;
</span><span class="c1"></span>        <span class="c1">/// &lt;param name=&#34;e&#34;&gt;&lt;/param&gt;
</span><span class="c1"></span>        <span class="c1">/// 
</span><span class="c1"></span>        <span class="kt">int</span> <span class="n">Freq</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span>
        <span class="k">private</span> <span class="k">void</span> <span class="n">Subform_button_draw_Click</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">EventArgs</span> <span class="n">e</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">double</span> <span class="n">degree</span> <span class="p">=</span> <span class="m">0.0</span><span class="p">;</span>
            <span class="kt">double</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">xo</span> <span class="p">=</span> <span class="m">0.0</span><span class="p">,</span> <span class="n">yo</span> <span class="p">=</span> <span class="m">0.0</span><span class="p">;</span>
            <span class="k">const</span> <span class="kt">int</span> <span class="n">points</span> <span class="p">=</span> <span class="m">360</span> <span class="p">*</span> <span class="m">2</span><span class="p">;</span>

            <span class="n">Graphics</span> <span class="n">g</span> <span class="p">=</span> <span class="n">Subform2_pictureBox1</span><span class="p">.</span><span class="n">CreateGraphics</span><span class="p">();</span>
            <span class="n">g</span><span class="p">.</span><span class="n">Clear</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">White</span><span class="p">);</span>
            <span class="n">Pen</span> <span class="n">pen</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Pen</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">Red</span><span class="p">);</span>   <span class="c1">//选择画笔颜色、型号、宽度等等
</span><span class="c1"></span>
            <span class="c1">//绘制坐标轴
</span><span class="c1"></span>            <span class="n">g</span><span class="p">.</span><span class="n">DrawLine</span><span class="p">(</span><span class="n">pen</span><span class="p">,</span> <span class="k">new</span> <span class="n">Point</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="n">Subform2_pictureBox1</span><span class="p">.</span><span class="n">Size</span><span class="p">.</span><span class="n">Height</span> <span class="p">/</span> <span class="m">2</span><span class="p">),</span> <span class="k">new</span> <span class="n">Point</span><span class="p">(</span><span class="n">Subform2_pictureBox1</span><span class="p">.</span><span class="n">Size</span><span class="p">.</span><span class="n">Width</span><span class="p">,</span> <span class="n">Subform2_pictureBox1</span><span class="p">.</span><span class="n">Size</span><span class="p">.</span><span class="n">Height</span> <span class="p">/</span> <span class="m">2</span><span class="p">));</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">points</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
            <span class="p">{</span>
                <span class="n">degree</span> <span class="p">=</span> <span class="n">Math</span><span class="p">.</span><span class="n">PI</span> <span class="p">*</span> <span class="m">2</span> <span class="p">*</span> <span class="n">i</span> <span class="p">*</span> <span class="n">Freq</span> <span class="p">/</span> <span class="m">360</span><span class="p">;</span>
                <span class="n">x</span> <span class="p">=</span> <span class="n">Subform2_pictureBox1</span><span class="p">.</span><span class="n">Size</span><span class="p">.</span><span class="n">Width</span> <span class="p">*</span> <span class="n">i</span> <span class="p">/</span> <span class="n">points</span><span class="p">;</span>
                <span class="n">y</span> <span class="p">=</span> <span class="n">Subform2_pictureBox1</span><span class="p">.</span><span class="n">Size</span><span class="p">.</span><span class="n">Height</span> <span class="p">/</span> <span class="m">2</span> <span class="p">-</span> <span class="n">Math</span><span class="p">.</span><span class="n">Sin</span><span class="p">(</span><span class="n">degree</span><span class="p">)</span> <span class="p">*</span> <span class="p">(</span><span class="n">Subform2_pictureBox1</span><span class="p">.</span><span class="n">Size</span><span class="p">.</span><span class="n">Height</span> <span class="p">/</span> <span class="m">2</span> <span class="p">-</span> <span class="m">50</span><span class="p">);</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">degree</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">g</span><span class="p">.</span><span class="n">DrawLine</span><span class="p">(</span><span class="n">pen</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">xo</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">yo</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">x</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">y</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="n">xo</span> <span class="p">=</span> <span class="n">x</span><span class="p">;</span>
                <span class="n">yo</span> <span class="p">=</span> <span class="n">y</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="k">void</span> <span class="n">Subform2_comboBox_fre_SelectedIndexChanged</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">EventArgs</span> <span class="n">e</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">switch</span><span class="p">(</span><span class="n">Subform2_comboBox_fre</span><span class="p">.</span><span class="n">SelectedItem</span><span class="p">.</span><span class="n">ToString</span><span class="p">())</span>
            <span class="p">{</span>
                <span class="k">case</span> <span class="s">&#34;1kHz&#34;</span><span class="p">:</span>
                    <span class="n">Freq</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="k">case</span> <span class="s">&#34;2kHz&#34;</span><span class="p">:</span>
                    <span class="n">Freq</span> <span class="p">=</span> <span class="m">2</span><span class="p">;</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="k">case</span> <span class="s">&#34;3kHz&#34;</span><span class="p">:</span>
                    <span class="n">Freq</span> <span class="p">=</span> <span class="m">3</span><span class="p">;</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="k">default</span><span class="p">:</span>
                    <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>C#窗体程序基础</title>
			<link>https://hansomxue99.github.io/posts/c_winform/</link>
			<pubDate>Mon, 26 Apr 2021 20:26:42 +0800</pubDate>
			
			<guid>https://hansomxue99.github.io/posts/c_winform/</guid>
			<description>Form和Form.Designer的关系：Form的构造方法调用了Form.Designer中的InitializeComponent方法
  读取时间：
string timeStr = DateTime.Now.ToString(&amp;#34;yyyy-MM-dd HH:mm:ss&amp;#34;); //文本框显示 textBox.Text = timeStr;   两个字段属性的区别：Name和Text。
  手工布局——&amp;gt;窗口自适应
//重写父类的方法 protected override void Onlayout(LayoutEventArgs levent) { //1. 调用父类的layout  base.OnLayout(levent); //2. 获取客户区的窗口大小 ClientSize(注意是客户区，不包含标题栏)  int w = this.ClientSize.Width; int h = this.ClientSize.Height; //3. 根据需求，计算每一个控件的大小和位置 } 注意：文本框AutoSize设为false；窗口大小改变时，系统框架会自动调用OnLayout()方法。
  Anchor和Dock属性不能同时设置
  textbox
private void box1_Keypress(object sender, KeypressEventArgs e) { char ch = e.KeyChar; if(ch == &amp;#39;\r&amp;#39;) { string str = box1.</description>
			<content type="html"><![CDATA[<ol>
<li>
<p>Form和Form.Designer的关系：Form的构造方法调用了Form.Designer中的InitializeComponent方法</p>
</li>
<li>
<p>读取时间：</p>
<div class="highlight"><pre class="chroma"><code class="language-c#" data-lang="c#"><span class="kt">string</span> <span class="n">timeStr</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">.</span><span class="n">ToString</span><span class="p">(</span><span class="s">&#34;yyyy-MM-dd HH:mm:ss&#34;</span><span class="p">);</span>
   
<span class="c1">//文本框显示
</span><span class="c1"></span><span class="n">textBox</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="n">timeStr</span><span class="p">;</span>
</code></pre></div></li>
<li>
<p>两个字段属性的区别：Name和Text。</p>
</li>
<li>
<p>手工布局——&gt;窗口自适应</p>
<div class="highlight"><pre class="chroma"><code class="language-c#" data-lang="c#"><span class="c1">//重写父类的方法
</span><span class="c1"></span><span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="n">Onlayout</span><span class="p">(</span><span class="n">LayoutEventArgs</span> <span class="n">levent</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">//1. 调用父类的layout
</span><span class="c1"></span>    <span class="k">base</span><span class="p">.</span><span class="n">OnLayout</span><span class="p">(</span><span class="n">levent</span><span class="p">);</span>
       
    <span class="c1">//2. 获取客户区的窗口大小 ClientSize(注意是客户区，不包含标题栏)
</span><span class="c1"></span> <span class="kt">int</span> <span class="n">w</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">ClientSize</span><span class="p">.</span><span class="n">Width</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">h</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">ClientSize</span><span class="p">.</span><span class="n">Height</span><span class="p">;</span>
       
    <span class="c1">//3. 根据需求，计算每一个控件的大小和位置
</span><span class="c1"></span><span class="p">}</span>
</code></pre></div><p>注意：文本框AutoSize设为false；窗口大小改变时，系统框架会自动调用OnLayout()方法。</p>
</li>
<li>
<p>Anchor和Dock属性不能同时设置</p>
</li>
<li>
<p>textbox</p>
<div class="highlight"><pre class="chroma"><code class="language-c#" data-lang="c#"><span class="k">private</span> <span class="k">void</span> <span class="n">box1_Keypress</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">KeypressEventArgs</span> <span class="n">e</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">char</span> <span class="n">ch</span> <span class="p">=</span> <span class="n">e</span><span class="p">.</span><span class="n">KeyChar</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="n">ch</span> <span class="p">==</span> <span class="sc">&#39;\r&#39;</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">string</span> <span class="n">str</span> <span class="p">=</span> <span class="n">box1</span><span class="p">.</span><span class="n">Text</span><span class="p">;</span>
        <span class="n">MessageBox</span><span class="p">.</span><span class="n">Show</span><span class="p">(</span><span class="s">&#34;用户输入了：&#34;</span> <span class="p">+</span> <span class="n">str</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></li>
<li>
<p>checkBox复选框</p>
<p>check属性：是否勾选</p>
<p>Text属性：文本显示</p>
<p>事件：Click用户点击</p>
<p>​            CheckChanged用户点击或程序改变</p>
</li>
<li>
<p>下拉框</p>
<p>添加下拉选项：自动添加（Items列表）和代码添加 <code>combox1.Items.Add(&quot;&quot;);</code></p>
<p>获取选中值或索引：</p>
<p>​	SlectedItem</p>
<p>​	SlectedIndex：未选中-1</p>
<p>用户选中事件</p>
<p>​	SlectedIndexChanged</p>
<div class="highlight"><pre class="chroma"><code class="language-c#" data-lang="c#"><span class="k">private</span> <span class="n">combox1_SelectedIndexChanged</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">EventArgs</span> <span class="n">e</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&#34;现在选中的是：&#34;</span> <span class="p">+</span> <span class="n">combox1</span><span class="p">.</span><span class="n">SelectedItem</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></li>
<li>
<p>列表框ListBox</p>
<p>SelectionMode ：单选或多选模式</p>
<p>SelectedIndexChanged：选择改变事件</p>
</li>
<li>
<p>ToString方法的重写</p>
<div class="highlight"><pre class="chroma"><code class="language-c#" data-lang="c#"><span class="k">public</span> <span class="k">override</span> <span class="kt">string</span> <span class="n">ToString</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&#34;{0} {1}&#34;</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="n">name</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>C#面向对象</title>
			<link>https://hansomxue99.github.io/posts/c_class/</link>
			<pubDate>Mon, 26 Apr 2021 20:23:44 +0800</pubDate>
			
			<guid>https://hansomxue99.github.io/posts/c_class/</guid>
			<description>C#面向对象 1. 新建类和创建对象 //新建类 public class Point{ public int x,y;	//成员变量  public Piont(int x, int y){	//构造函数：函数名与类名一致，用于给对象初始化  this.x = x; this.y = y; } } //创建对象 Point p1 = new Piont(10,10);	//new关键字新建对象 2. 创建子类 //创建Piont的子类Point3D public class Point3D: Point{ public int z;	//子类对象会继承父类的public类型的成员 	public Point3D(int x, int y, int z){ //省略Point(x,y);这是因为在创建子类时，父类已经初始化，不必重复声明 	this.z = z;	//只需执行z的初始化 	} } //创建Point3D对象 //第一种方法 Point3D p2 = new Point3D(10,20,30); //第二种方法 Point p2 = new Point3D(10,20,30); 3.</description>
			<content type="html"><![CDATA[<h2 id="c面向对象">C#面向对象</h2>
<h3 id="1-新建类和创建对象">1. 新建类和创建对象</h3>
<div class="highlight"><pre class="chroma"><code class="language-c#" data-lang="c#"><span class="c1">//新建类
</span><span class="c1"></span><span class="k">public</span> <span class="k">class</span> <span class="nc">Point</span><span class="p">{</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">;</span>		<span class="c1">//成员变量
</span><span class="c1"></span>    
    <span class="k">public</span> <span class="n">Piont</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">){</span>		<span class="c1">//构造函数：函数名与类名一致，用于给对象初始化
</span><span class="c1"></span>        <span class="k">this</span><span class="p">.</span><span class="n">x</span> <span class="p">=</span> <span class="n">x</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="n">y</span> <span class="p">=</span> <span class="n">y</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-c#" data-lang="c#"><span class="c1">//创建对象
</span><span class="c1"></span><span class="n">Point</span> <span class="n">p1</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Piont</span><span class="p">(</span><span class="m">10</span><span class="p">,</span><span class="m">10</span><span class="p">);</span>	<span class="c1">//new关键字新建对象
</span></code></pre></div><h3 id="2-创建子类">2. 创建子类</h3>
<div class="highlight"><pre class="chroma"><code class="language-c#" data-lang="c#"><span class="c1">//创建Piont的子类Point3D
</span><span class="c1"></span><span class="k">public</span> <span class="k">class</span> <span class="nc">Point3D</span><span class="p">:</span> <span class="n">Point</span><span class="p">{</span>
	<span class="k">public</span> <span class="kt">int</span> <span class="n">z</span><span class="p">;</span>	<span class="c1">//子类对象会继承父类的public类型的成员
</span><span class="c1"></span>	<span class="k">public</span> <span class="n">Point3D</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">,</span> <span class="kt">int</span> <span class="n">z</span><span class="p">){</span>
		<span class="c1">//省略Point(x,y);这是因为在创建子类时，父类已经初始化，不必重复声明
</span><span class="c1"></span>		<span class="k">this</span><span class="p">.</span><span class="n">z</span> <span class="p">=</span> <span class="n">z</span><span class="p">;</span>		<span class="c1">//只需执行z的初始化
</span><span class="c1"></span>	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-c#" data-lang="c#"><span class="c1">//创建Point3D对象
</span><span class="c1">//第一种方法
</span><span class="c1"></span><span class="n">Point3D</span> <span class="n">p2</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Point3D</span><span class="p">(</span><span class="m">10</span><span class="p">,</span><span class="m">20</span><span class="p">,</span><span class="m">30</span><span class="p">);</span>
<span class="c1">//第二种方法
</span><span class="c1"></span><span class="n">Point</span> <span class="n">p2</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Point3D</span><span class="p">(</span><span class="m">10</span><span class="p">,</span><span class="m">20</span><span class="p">,</span><span class="m">30</span><span class="p">);</span>
</code></pre></div><h3 id="3-类的封装性与可访问性">3. 类的封装性与可访问性</h3>
<p>这里主要介绍两种访问关键字public和private。</p>
<table>
<thead>
<tr>
<th style="text-align:left">可访问性</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">public</td>
<td style="text-align:left">修饰的成员变量和方法不受限</td>
</tr>
<tr>
<td style="text-align:left">private</td>
<td style="text-align:left">修饰的成员变量和方法只能在该类中访问，此类之外的方法不能对其访问。</td>
</tr>
</tbody>
</table>
<h3 id="4-static关键字">4. static关键字</h3>
<p>顾名思义，static关键字创建的是静态成员变量或者方法。何为静态？静态即是在内存中划出一块固定的存储空间供数据进行使用。</p>
<p>因此，对于静态方法来说，使用静态方法不必创建(new)一个新的对象，而可以直接通过类名对静态方法进行调用。</p>
<h3 id="5-参数修饰符">5. 参数修饰符</h3>
<ol>
<li>
<p>ref（引用）修饰符</p>
<div class="highlight"><pre class="chroma"><code class="language-c#" data-lang="c#"><span class="c1">//交换两数
</span><span class="c1"></span><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
   
<span class="k">class</span> <span class="nc">Test</span><span class="p">{</span>
    <span class="k">static</span> <span class="k">void</span> <span class="n">Swap</span><span class="p">(</span><span class="k">ref</span> <span class="n">x</span><span class="p">,</span> <span class="k">ref</span> <span class="n">y</span><span class="p">){</span>
        <span class="kt">int</span> <span class="n">temp</span> <span class="p">=</span> <span class="n">x</span><span class="p">;</span>
        <span class="n">x</span> <span class="p">=</span> <span class="n">y</span><span class="p">;</span>
        <span class="n">y</span> <span class="p">=</span> <span class="n">temp</span><span class="p">;</span>
    <span class="p">}</span>
       
    <span class="k">static</span> <span class="k">void</span> <span class="n">Main</span><span class="p">(){</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">j</span> <span class="p">=</span> <span class="m">2</span><span class="p">;</span>
        <span class="n">Swap</span><span class="p">(</span><span class="k">ref</span> <span class="n">i</span><span class="p">,</span> <span class="k">ref</span> <span class="n">j</span><span class="p">);</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">Writeline</span><span class="p">(</span><span class="s">&#34;{0} {1}&#34;</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">);</span>		<span class="c1">//output: &#34;2 1&#34;
</span><span class="c1"></span>    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></li>
<li>
<p>out（输出）修饰符</p>
<div class="highlight"><pre class="chroma"><code class="language-c#" data-lang="c#"><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
   
<span class="k">class</span> <span class="nc">Test</span><span class="p">{</span>
    <span class="k">static</span> <span class="k">void</span> <span class="n">Divide</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">,</span> <span class="k">out</span> <span class="kt">int</span> <span class="n">result</span><span class="p">,</span> <span class="k">out</span> <span class="kt">int</span> <span class="n">remainder</span><span class="p">)</span> <span class="p">{</span>
         <span class="n">result</span> <span class="p">=</span> <span class="n">x</span> <span class="p">/</span> <span class="n">y</span><span class="p">;</span>
         <span class="n">remainder</span> <span class="p">=</span> <span class="n">x</span> <span class="p">%</span> <span class="n">y</span><span class="p">;</span>
    <span class="p">}</span>
   
    <span class="k">static</span> <span class="k">void</span> <span class="n">Main</span><span class="p">()</span> <span class="p">{</span>
         <span class="kt">int</span> <span class="n">res</span><span class="p">,</span> <span class="n">rem</span><span class="p">;</span>
         <span class="n">Divide</span><span class="p">(</span><span class="m">10</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="k">out</span> <span class="n">res</span><span class="p">,</span> <span class="k">out</span> <span class="n">rem</span><span class="p">);</span>
         <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&#34;{0} {1}&#34;</span><span class="p">,</span> <span class="n">res</span><span class="p">,</span> <span class="n">rem</span><span class="p">);</span>   <span class="c1">// Outputs &#34;3 1&#34;
</span><span class="c1"></span>    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></li>
</ol>
]]></content>
		</item>
		
	</channel>
</rss>
