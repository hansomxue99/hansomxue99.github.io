<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>串口 on hansomxue99&#39;s blog</title>
    <link>https://hansomxue99.github.io/tags/%E4%B8%B2%E5%8F%A3/</link>
    <description>Recent content in 串口 on hansomxue99&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sat, 13 Feb 2021 09:42:04 +0800</lastBuildDate><atom:link href="https://hansomxue99.github.io/tags/%E4%B8%B2%E5%8F%A3/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>基于HAL中断的串口收发</title>
      <link>https://hansomxue99.github.io/posts/uart_it/</link>
      <pubDate>Sat, 13 Feb 2021 09:42:04 +0800</pubDate>
      
      <guid>https://hansomxue99.github.io/posts/uart_it/</guid>
      <description>1. 串口中断的配置——使用cubemx软件 （1）配置时钟
（2）配置通用GPIO
（3）使能串口：GPIO、串口基本参数、NVIC中断函数
2. HAL库中断处理机制 （1）NVIC，嵌套向量中断控制器，用来决定中断的优先级；NVIC在Conrtex-M内核中（2）中断优先级用一个8位寄存器来进行配置，其中低4位全部置为0（为节约内核资源），因此只有高4为配置优先级。中断优先级分为五个分组，它们的抢占优先级和子优先级都不同，具体如下表：
   优先级分组 抢占优先级占的位数 子优先级占的位数     NVIC_PriorityGroup_0 0 bit 4 bit   NVIC_PriorityGroup_1 1 bit 3 bit   NVIC_PriorityGroup_2 2 bit 2 bit   NVIC_PriorityGroup_3 3 bit 1 bit   NVIC_PriorityGroup_4 4 bit 0 bit    （3）CPU优先级的判断
 先判断抢占优先级，数字越小，优先级越高； 若抢占优先级相同，判断子优先级，同样，数字越小，优先级越高。  3. HAL中断回调函数 （1）中断的实现一般是通过中断回调函数，如： __weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
（2）中断回调函数函数用__weak进行声明，表明该函数是虚函数，用户调用中断时需要对其进行重定义，可以在工程任意文件下进行重定义。
（3）重定义串口中断回调函数
/* USER CODE BEGIN 4 */ void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) { /* 判断是哪个串口触发的中断 */ if(huart -&amp;gt;Instance == USART1) { if(rec_dat==&amp;#39;\n&amp;#39;) { HAL_UART_Transmit_IT(&amp;amp;huart1, rec_buf, ulength); ulength=0; } else { rec_buf[ulength++]=rec_dat; } //重新使能串口接收中断 	HAL_UART_Receive_IT(huart, &amp;amp;rec_dat, 1); } } /* USER CODE END 4 */ 4.</description>
    </item>
    
    <item>
      <title>UART异步串口通信</title>
      <link>https://hansomxue99.github.io/posts/uart/</link>
      <pubDate>Wed, 10 Feb 2021 10:48:50 +0800</pubDate>
      
      <guid>https://hansomxue99.github.io/posts/uart/</guid>
      <description>1. 什么是UART？ （1）UART，通用异步收发器。相比于USART，UART收发是以字符为单位，没有CLK同步时钟。 （2）UART最主要的是三根数据线：  TXD发送引脚 RXD接收引脚 GND接地引脚  （3）UART比较重要的几个参数：  波特率：每秒传送的码元数，比如9600，115200 数据位：典型值5、6、8、9位 奇偶校验位：一般分为奇校验和偶校验或者无校验位 停止位：典型值1、1.5、2位  （4）UART工作示意图如下图所示：   UART工作模式
  这是典型的UART异步通信模式，数据位为8，无奇偶校验位，一位停止位。UART串口发送一次包含：起始位，数据位（低位在前），奇偶校验位（可选），以及停止位。2. 以STM32为例，分析UART工作原理 （1）了解STM32串口主要特性  可编程数据字长度(8位或9位) 可配置的停止位-支持1或2个停止位 可配置的使用DMA的多缓冲器通信 单独的发送器和接收器使能位 检测标志：接收缓冲器满、发送缓冲器空、传输结束标志  （2）了解STM32串口主要寄存器 STM32串口工作流程如下图：   UART工作流程
   状态寄存器USART_SR
  TXE（发送数据寄存器空），当数据全部移入发送移位寄存器时，置1 TC（发送完成），当一帧数据发送完成，且TXE=1时，置1 RXNE（读数据寄存器非空），当有数据读入数据寄存器USART_DR时，置1   数据寄存器USART_DR，发送或接收缓存数据
  控制寄存器1 USART_CR1，主要用于配置中断和使能
  UE（USART使能），TE（发送使能），RE（接收使能） TXEIE 发送缓冲区空中断使能 TCIE 发送完成中断使能 RXNEIE 接收缓冲区非空中断使能  （3）STM32基本配置：波特率，数据位，奇偶校验位，停止位，串口/中断使能 3. UART发送数据 （1）首先是对UART串口的初始化配置 （2）调用函数 HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)  huart是UART句柄结构体（姑且先这么叫） pData是待发送的字符数组，每次发送前都需要进行一次读写，可以调用sprintf函数 Size是指pData字符数组的长度，一般是strlen(pData) Timeout是待发送数据的生存时间，若超时会返回HAL_TIMEOUT  （3）自定义函数usUART_sendString(UART_HandleTypeDef *huart, uint8_t *pData)  这是根据HAL库发送函数由用户进行改写的字符串发送函数，形参只有两个 函数编写借鉴51单片机串口思想，代码编写如下：  void usUart_sendString(UART_HandleTypeDef *huart, uint8_t *pData) { /* 判断是否发送完成 */ while(*pData) { /* 每次发送一个字符 */ HAL_StatusTypeDef HAL_UART_Transmit(huart, pData, 1, 0xffff); /* 字符指针移位，指向下一个字符的内容 */ pData++; } } 4.</description>
    </item>
    
  </channel>
</rss>
