<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notification on Team&#39;s blog</title>
    <link>https://hansomxue99.github.io/tags/notification/</link>
    <description>Recent content in Notification on Team&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Tue, 11 May 2021 18:24:55 +0800</lastBuildDate><atom:link href="https://hansomxue99.github.io/tags/notification/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DX录音——通知创建</title>
      <link>https://hansomxue99.github.io/posts/%E5%BD%95%E9%9F%B3/notify/</link>
      <pubDate>Tue, 11 May 2021 18:24:55 +0800</pubDate>
      
      <guid>https://hansomxue99.github.io/posts/%E5%BD%95%E9%9F%B3/notify/</guid>
      <description>//下面方法中的notifyevent是定义的全局变量private AutoResetEvent notifyevent = null; //下面方法中的notifythread是定义的全局变量private Thread notifythread = null; //下面方法中的myNotify是定义的全局变量private Notify myNotify = null;//缓冲区提示事件 //设置通知 private void CreateNotification() { BufferPositionNotify[] bpn = new BufferPositionNotify[iNotifyNum];	//设置缓冲区通知个数  //设置通知事件  notifyevent = new AutoResetEvent(false); notifythread = new Thread(RecoData);	//开启线程  notifythread.Start(); for (int i = 0; i &amp;lt; iNotifyNum; i++) { bpn[i].Offset = iNotifySize + i * iNotifySize-1;//设置具体每个的位置  bpn[i].EventNotifyHandle = notifyevent.Handle; } myNotify = new Notify(capturebuffer); myNotify.SetNotificationPositions(bpn); } //线程中的事件 private void RecoData() { while (true) { // 等待缓冲区的通知消息  //notifyevent.</description>
    </item>
    
  </channel>
</rss>
