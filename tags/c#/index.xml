<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C# on Team&#39;s blog</title>
    <link>https://hansomxue99.github.io/tags/c#/</link>
    <description>Recent content in C# on Team&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Tue, 11 May 2021 18:20:27 +0800</lastBuildDate><atom:link href="https://hansomxue99.github.io/tags/c#/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linq</title>
      <link>https://hansomxue99.github.io/posts/linq/</link>
      <pubDate>Tue, 11 May 2021 18:20:27 +0800</pubDate>
      
      <guid>https://hansomxue99.github.io/posts/linq/</guid>
      <description>Linq查询  遍历一个集合  var query = from inventor in inventors select inventor; //返回enum类型 where过滤  var query = from patent in patents where patent.YearofPublication select new {patent.Title}; </description>
    </item>
    
    <item>
      <title>C#基础——多线程</title>
      <link>https://hansomxue99.github.io/posts/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Tue, 11 May 2021 18:20:07 +0800</pubDate>
      
      <guid>https://hansomxue99.github.io/posts/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</guid>
      <description>C# 多线程 1. 创建线程 首先必须导入命名空间 using System.Threading; 创建的线程包括无参数和有参数。
//创建无参线程 Thread t1 = new Thread(new ThreadStart(PrintNumbers));	//无参数的委托 t1.Start(); static void PrintNumbers(){...} //创建有参线程 Thread t2 = new Thread(new ParameterizedThreadStart(PrintNumbers));	//有参数的委托 t2.Start(10); static void PrintNumbers(object count){...}	//参数类型声明为object 2. AutoResetEvent 1）对象实例化
AutoResetEvent autoResetEvent = new AutoResetEvent(false); false：无信号，子线程的WaitOne方法不会被自动调用
true：有信号，子线程的WaitOne方法会被自动调用
2）WaitOne 方法
组织当前线程继续运行，等待其他线程发送信号。
3）Set方法
示例：
static AutoResetEvent autoResetEvent = new AutoResetEvent(true); static void Main(string[] args) { //开启一个读线程(子线程)  Thread readerThread = new Thread(new ThreadStart(ReadThreadProc)); readerThread.Name = &amp;#34;ReaderThread&amp;#34;; readerThread.</description>
    </item>
    
    <item>
      <title>C#基础——消息</title>
      <link>https://hansomxue99.github.io/posts/%E6%B6%88%E6%81%AF/</link>
      <pubDate>Tue, 11 May 2021 18:18:37 +0800</pubDate>
      
      <guid>https://hansomxue99.github.io/posts/%E6%B6%88%E6%81%AF/</guid>
      <description>重写消息方法  //窗体 捕获消息 const int WM_LBUTTONDOWN = 0x201; protected override void WndProc(ref Message m) { if(m.Msg == WM_LBUTTONDOWN) { Console.WriteLine(&amp;#34;WndProc左键按下&amp;#34;); } base.WndProc(ref m); } 进程间通信——发送消息  const int WM_COPYDATA = 0x004A; public struct COPYDATASTRUCT { public IntPtr dwData; public int cbData; [MarshalAs(UnmanagedType.LPStr)] public string lpData; } [DllImport(&amp;#34;User32.dll&amp;#34;, EntryPoint = &amp;#34;SendMessage&amp;#34;)] private static extern int SendMessage( int hWnd,	//handle to destination window  int Msg,	//message  int wParam,	//first message parameter  ref COPYDATASTRUCT IParam	//second message parameter ); [DllImport(&amp;#34;User32.</description>
    </item>
    
    <item>
      <title>C#基础——委托</title>
      <link>https://hansomxue99.github.io/posts/%E5%A7%94%E6%89%98/</link>
      <pubDate>Tue, 11 May 2021 18:17:43 +0800</pubDate>
      
      <guid>https://hansomxue99.github.io/posts/%E5%A7%94%E6%89%98/</guid>
      <description>1. 声明委托类型 delegate bool Function(int num); //此处不封闭 static Function GreaterThan10 = (new) delegate(int n){ return num&amp;gt;=10 ;}; 2. 修改形参列表 static List&amp;lt;int&amp;gt; Traverse(List&amp;lt;int&amp;gt; nums, Function function) { ... } 3. 传入委托 Traverse (new List&amp;lt;int&amp;gt;(){1,2,3,4,10}, GreaterThan10) 4. Lambda——对委托的简化 delegate(int num){ return num&amp;gt;=10 ;} //更改为表达式lambda (int num) =&amp;gt; {return num&amp;gt;=10 ;} //进一步简化，省去int (num) =&amp;gt; {return num&amp;gt;=10 ;} //进一步简化 n =&amp;gt; num&amp;gt;=10 5. 泛型委托 var list = new List&amp;lt;int&amp;gt;(){1,2,3,4,5,6,7}; list.Foreach(i =&amp;gt; Console.WriteLine(i)); list.Sum(n =&amp;gt; {if(n&amp;lt;=0) return 0; else return n;}); 6.</description>
    </item>
    
    <item>
      <title>C#基础——关于数据类型</title>
      <link>https://hansomxue99.github.io/posts/%E7%9F%A5%E8%AF%86%E7%82%B9/</link>
      <pubDate>Tue, 11 May 2021 18:15:51 +0800</pubDate>
      
      <guid>https://hansomxue99.github.io/posts/%E7%9F%A5%E8%AF%86%E7%82%B9/</guid>
      <description>1. struct结构体 2. enum枚举类型 3. 异常 3.1 try / catch /finally
try { ... } catch(...)	//可以包含多个catch { ... } finally { ... } 3.2 异常类都是继承于System.Exception
4. 泛型 4.1 最常用的泛型——集合
static T Sum&amp;lt;T&amp;gt; (List&amp;lt;T&amp;gt; nums) where T : struct	//泛型约束 { T sum = default(T); foreach(dynamic num in nums) { sum += num; } return sum; } 4.2 泛型的约束
5. dll那些事 5.1 .sln：解决方案， 一个解决方案可以包含多个项目
5.2 项目：包含程序集（Assembly）、包、模块，表现为dll、exe
5.3 dll：动态链接库；一堆函数
 手工引用dll [DllImport(&amp;ldquo;kernel.</description>
    </item>
    
  </channel>
</rss>
